// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	book "advancerentbook-api/features/book"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, fileData, newBook
func (_m *BookService) Add(token interface{}, fileData multipart.FileHeader, newBook book.Core) (book.Core, error) {
	ret := _m.Called(token, fileData, newBook)

	var r0 book.Core
	if rf, ok := ret.Get(0).(func(interface{}, multipart.FileHeader, book.Core) book.Core); ok {
		r0 = rf(token, fileData, newBook)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, multipart.FileHeader, book.Core) error); ok {
		r1 = rf(token, fileData, newBook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookDetail provides a mock function with given fields: bookID
func (_m *BookService) BookDetail(bookID uint) (book.Core, error) {
	ret := _m.Called(bookID)

	var r0 book.Core
	if rf, ok := ret.Get(0).(func(uint) book.Core); ok {
		r0 = rf(bookID)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, bookID
func (_m *BookService) Delete(token interface{}, bookID uint) error {
	ret := _m.Called(token, bookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBook provides a mock function with given fields: quote
func (_m *BookService) GetAllBook(quote string) ([]book.Core, error) {
	ret := _m.Called(quote)

	var r0 []book.Core
	if rf, ok := ret.Get(0).(func(string) []book.Core); ok {
		r0 = rf(quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyBook provides a mock function with given fields: token
func (_m *BookService) MyBook(token interface{}) ([]book.Core, error) {
	ret := _m.Called(token)

	var r0 []book.Core
	if rf, ok := ret.Get(0).(func(interface{}) []book.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, bookID, fileData, updatedBook
func (_m *BookService) Update(token interface{}, bookID uint, fileData multipart.FileHeader, updatedBook book.Core) (book.Core, error) {
	ret := _m.Called(token, bookID, fileData, updatedBook)

	var r0 book.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, multipart.FileHeader, book.Core) book.Core); ok {
		r0 = rf(token, bookID, fileData, updatedBook)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, multipart.FileHeader, book.Core) error); ok {
		r1 = rf(token, bookID, fileData, updatedBook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookService(t mockConstructorTestingTNewBookService) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
