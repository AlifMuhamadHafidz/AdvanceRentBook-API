// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	order "advancerentbook-api/features/order"

	mock "github.com/stretchr/testify/mock"
)

// OrderData is an autogenerated mock type for the OrderData type
type OrderData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userId, totalRentPrice
func (_m *OrderData) Add(userId uint, totalRentPrice float64) (order.Core, string, error) {
	ret := _m.Called(userId, totalRentPrice)

	var r0 order.Core
	if rf, ok := ret.Get(0).(func(uint, float64) order.Core); ok {
		r0 = rf(userId, totalRentPrice)
	} else {
		r0 = ret.Get(0).(order.Core)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(uint, float64) string); ok {
		r1 = rf(userId, totalRentPrice)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, float64) error); ok {
		r2 = rf(userId, totalRentPrice)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderHistory provides a mock function with given fields: userID
func (_m *OrderData) GetOrderHistory(userID uint) ([]order.Core, error) {
	ret := _m.Called(userID)

	var r0 []order.Core
	if rf, ok := ret.Get(0).(func(uint) []order.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRentHistory provides a mock function with given fields: userID
func (_m *OrderData) GetRentHistory(userID uint) ([]order.Core, error) {
	ret := _m.Called(userID)

	var r0 []order.Core
	if rf, ok := ret.Get(0).(func(uint) []order.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationTransactionStatus provides a mock function with given fields: transactionID, transStatus
func (_m *OrderData) NotificationTransactionStatus(transactionID string, transStatus string) error {
	ret := _m.Called(transactionID, transStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(transactionID, transStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: orderID, status
func (_m *OrderData) UpdateStatus(orderID uint, status string) error {
	ret := _m.Called(orderID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderData interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderData creates a new instance of OrderData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderData(t mockConstructorTestingTNewOrderData) *OrderData {
	mock := &OrderData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
